// import React, { useState, useEffect } from "react";
// import axios from "axios";
// import "bootstrap/dist/css/bootstrap.min.css";
// import { Card, Button, Spinner, Badge, Collapse, Container, Row, Col } from "react-bootstrap";
// import { FaChevronDown, FaChevronUp, FaClock, FaProjectDiagram, FaEye, FaBolt, FaBug, FaCheckCircle } from "react-icons/fa";
// import "./JiraDashboard.css";

// const JiraDashboard = () => {
//   const [jiraData, setJiraData] = useState([]);
//   const [loading, setLoading] = useState(true);
//   const [error, setError] = useState(null);
//   const [openIssue, setOpenIssue] = useState(null);

//   const fetchJiraData = async (startAt = 0, accumulatedIssues = []) => {
//     try {
//       const response = await axios.get(
//         `http://localhost:8000/api/fetch-jira-data?startAt=${startAt}&maxResults=50`
//       );
      
//       const { issues, total } = response.data;
//       const updatedIssues = [...accumulatedIssues, ...issues];

//       if (startAt + issues.length < total) {
//         await fetchJiraData(startAt + issues.length, updatedIssues);
//       } else {
//         setJiraData(updatedIssues);
//         setLoading(false);
//       }
//     } catch (error) {
//       console.error("Error fetching Jira data:", error);
//       setError("Error fetching Jira data.");
//       setLoading(false);
//     }
//   };

//   useEffect(() => {
//     fetchJiraData();
//   }, []);

//   if (loading) return <Spinner animation="border" className="d-block mx-auto mt-5 text-primary" />;
//   if (error) return <div className="text-danger text-center mt-5">{error}</div>;

//   return (
//     <Container className="mt-4">
//       <h1 className="text-center mb-4 display-4 text-primary">Jira Dashboard</h1>
//       <Row>
//         {jiraData.map((issue) => (
//           <Col key={issue.id} md={6} lg={4} className="mb-4">
//             <Card className="jira-card shadow-lg border-0">
//               <Card.Body>
//                 <Card.Title className="d-flex justify-content-between align-items-center">
//                   <span className="issue-key">{issue.key} - {issue.fields?.summary || "No Summary"}</span>
//                   <Button
//                     variant="outline-primary"
//                     className="toggle-btn"
//                     onClick={() => setOpenIssue(openIssue === issue.id ? null : issue.id)}
//                   >
//                     {openIssue === issue.id ? <FaChevronUp /> : <FaChevronDown />}
//                   </Button>
//                 </Card.Title>
//                 <Card.Subtitle className="mb-2 text-muted">{issue.fields?.issuetype?.name || "N/A"}</Card.Subtitle>
//                 <Badge bg={issue.fields?.status?.name === "Done" ? "success" : "warning"} className="status-badge">
//                   {issue.fields?.status?.name || "N/A"}
//                 </Badge>
//                 <Collapse in={openIssue === issue.id}>
//                   <div className="mt-3">
//                     <p><FaClock className="icon" /> Created: {new Date(issue.fields?.created).toLocaleString()}</p>
//                     <p><FaClock className="icon" /> Updated: {new Date(issue.fields?.updated).toLocaleString()}</p>
//                     <p><FaProjectDiagram className="icon" /> Project: {issue.fields?.project?.name || "N/A"}</p>
//                     <p><FaBolt className="icon" /> Priority: {issue.fields?.priority?.name || "N/A"}</p>
//                     <p><FaEye className="icon" /> Watchers: {issue.fields?.watches?.watchCount || 0}</p>
//                     <p><FaCheckCircle className="icon" /> Resolution: {issue.fields?.resolution?.name || "Unresolved"}</p>
//                   </div>
//                 </Collapse>
//               </Card.Body>
//             </Card>
//           </Col>
//         ))}
//       </Row>
//     </Container>
//   );
// };

// export default JiraDashboard;
